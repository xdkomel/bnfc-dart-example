// File generated by the BNF Converter (bnfc 2.9.6).

import 'ast.dart' as ast;
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
sealed class Token {}

class Space extends Token {}

class NewLine extends Token {
  int indentDifference;
  NewLine.indent(this.indentDifference);
  NewLine() : indentDifference = 0;
  NewLine.nest() : indentDifference = 1;
  NewLine.unnest() : indentDifference = -1;
}

class Text extends Token {
  String text;
  Text(this.text);
}
class StringRenderer {
  // Change this value if you want to change the indentation length
  static const _indentInSpaces = 2;

  String print(IList<String> tokens) => tokens
      .map((element) => element.trim())
      .fold(IList<Token>(), _render)
      .fold(IList<(int, IList<Token>)>(), _split)
      .map((line) => (line.$1, line.$2.map(_tokenToString).join()))
      .fold(IList<(int, String)>(), _convertIndentation)
      .map(_addIndentation)
      .join('\n');

  IList<(int, IList<Token>)> _split(
    IList<(int, IList<Token>)> lists,
    Token token,
  ) =>
      switch (token) {
        NewLine nl => lists.add((
            nl.indentDifference,
            IList([]),
          )),
        _ => lists.isEmpty
            ? IList([
                (0, IList([token]))
              ])
            : lists.put(
                lists.length - 1,
                (lists.last.$1, lists.last.$2.add(token)),
              ),
      };

  String _tokenToString(Token t) => switch (t) {
        Text t => t.text,
        Space _ => ' ',
        _ => '',
      };

  IList<(int, String)> _convertIndentation(
    IList<(int, String)> lines,
    (int, String) line,
  ) =>
      lines.add((
        line.$1 + (lines.lastOrNull?.$1 ?? 0),
        line.$2,
      ));

  String _addIndentation((int, String) indentedLine) =>
      ' ' * (_indentInSpaces * indentedLine.$1) + indentedLine.$2;

  // This function is supposed to be edited
  // in order to adjust the pretty printer behavior
  IList<Token> _render(IList<Token> tokens, String token) => switch (token) {
        '' || ' ' => tokens,
        '{' => tokens.addAll([Text(token), NewLine.nest()]),
        '}' => tokens.removeTrailingLines
            .addAll([NewLine.unnest(), Text(token), NewLine()]),
        ';' => tokens.removeTrailingSpaces.addAll([Text(token), NewLine()]),
        ')' || ']' || '>' || ',' => tokens
            .removeTrailingSpaces.removeTrailingLines
            .addAll([Text(token), Space()]),
        '\$' ||
        '&' ||
        '@' ||
        '!' ||
        '#' ||
        '(' ||
        '[' ||
        '<' ||
        '.' =>
          tokens.removeTrailingLines.add(Text(token)),
        _ => tokens.addAll([Text(token), Space()])
      };
}

extension TokensList on IList<Token> {
  IList<Token> get removeTrailingLines =>
      isNotEmpty && last is NewLine ? removeLast().removeTrailingLines : this;
  IList<Token> get removeTrailingSpaces =>
      isNotEmpty && last is Space ? removeLast().removeTrailingSpaces : this;
}

extension PrintableInt on int {
  String get print => toString();
}

extension PrintableDouble on double {
  String get print => toString();
}

final _renderer = StringRenderer();

mixin Printable {
  String get print => '[not implemented]';
}
IList<String> _prettifyExp(ast.Exp a) => switch (a) {
    ast.ConstInteger a => _prettifyConstInteger(a),
    ast.ConstDouble a => _prettifyConstDouble(a),
    ast.Mul a => _prettifyMul(a),
    ast.Div a => _prettifyDiv(a),
    ast.Sum a => _prettifySum(a),
    ast.Sub a => _prettifySub(a),
    ast.Brackets a => _prettifyBrackets(a),
  };
String printExp(ast.Exp x) => _renderer.print(_prettifyExp(x));
IList<String> _prettifyConstInteger(ast.ConstInteger a) => IList([
  a.integer.print,
]);

IList<String> _prettifyConstDouble(ast.ConstDouble a) => IList([
  a.myDouble.print,
]);

IList<String> _prettifyBrackets(ast.Brackets a) => IList([
  "(",
  ..._prettifyExp(a.exp),
  ")",
]);

String printConstInteger(ast.ConstInteger x) => _renderer.print(_prettifyConstInteger(x));
String printConstDouble(ast.ConstDouble x) => _renderer.print(_prettifyConstDouble(x));
String printBrackets(ast.Brackets x) => _renderer.print(_prettifyBrackets(x));
IList<String> _prettifyMul(ast.Mul a) => IList([
  ..._prettifyExp(a.exp1),
  "*",
  ..._prettifyExp(a.exp2),
]);

IList<String> _prettifyDiv(ast.Div a) => IList([
  ..._prettifyExp(a.exp1),
  "/",
  ..._prettifyExp(a.exp2),
]);

String printMul(ast.Mul x) => _renderer.print(_prettifyMul(x));
String printDiv(ast.Div x) => _renderer.print(_prettifyDiv(x));
IList<String> _prettifySum(ast.Sum a) => IList([
  ..._prettifyExp(a.exp1),
  "+",
  ..._prettifyExp(a.exp2),
]);

IList<String> _prettifySub(ast.Sub a) => IList([
  ..._prettifyExp(a.exp1),
  "+",
  ..._prettifyExp(a.exp2),
]);

String printSum(ast.Sum x) => _renderer.print(_prettifySum(x));
String printSub(ast.Sub x) => _renderer.print(_prettifySub(x));
